<?php

declare(strict_types=1);

/*
 * APIWithComplexHeaderParametersLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace APIWithComplexHeaderParametersLib\Models;

use APIWithComplexHeaderParametersLib\ApiHelper;
use stdClass;

class Bike implements \JsonSerializable
{
    /**
     * @var string
     */
    private $make;

    /**
     * @var string
     */
    private $model;

    /**
     * @var int
     */
    private $year;

    /**
     * @var int
     */
    private $engineCapacity;

    /**
     * @param string $make
     * @param string $model
     * @param int $year
     * @param int $engineCapacity
     */
    public function __construct(string $make, string $model, int $year, int $engineCapacity)
    {
        $this->make = $make;
        $this->model = $model;
        $this->year = $year;
        $this->engineCapacity = $engineCapacity;
    }

    /**
     * Returns Make.
     */
    public function getMake(): string
    {
        return $this->make;
    }

    /**
     * Sets Make.
     *
     * @required
     * @maps make
     */
    public function setMake(string $make): void
    {
        $this->make = $make;
    }

    /**
     * Returns Model.
     */
    public function getModel(): string
    {
        return $this->model;
    }

    /**
     * Sets Model.
     *
     * @required
     * @maps model
     */
    public function setModel(string $model): void
    {
        $this->model = $model;
    }

    /**
     * Returns Year.
     */
    public function getYear(): int
    {
        return $this->year;
    }

    /**
     * Sets Year.
     *
     * @required
     * @maps year
     */
    public function setYear(int $year): void
    {
        $this->year = $year;
    }

    /**
     * Returns Engine Capacity.
     */
    public function getEngineCapacity(): int
    {
        return $this->engineCapacity;
    }

    /**
     * Sets Engine Capacity.
     *
     * @required
     * @maps engineCapacity
     */
    public function setEngineCapacity(int $engineCapacity): void
    {
        $this->engineCapacity = $engineCapacity;
    }

    /**
     * Converts the Bike object to a human-readable string representation.
     *
     * @return string The string representation of the Bike object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'Bike',
            [
                'make' => $this->make,
                'model' => $this->model,
                'year' => $this->year,
                'engineCapacity' => $this->engineCapacity
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['make']           = $this->make;
        $json['model']          = $this->model;
        $json['year']           = $this->year;
        $json['engineCapacity'] = $this->engineCapacity;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
