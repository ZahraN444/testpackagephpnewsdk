<?php

declare(strict_types=1);

/*
 * APIWithComplexHeaderParametersLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace APIWithComplexHeaderParametersLib\Controllers;

use APIWithComplexHeaderParametersLib\Exceptions\ApiException;
use APIWithComplexHeaderParametersLib\Models\Bike;
use APIWithComplexHeaderParametersLib\Models\Car;
use APIWithComplexHeaderParametersLib\Models\PaypalMockResponseSchema;
use APIWithComplexHeaderParametersLib\Models\SuccessResponse;
use APIWithComplexHeaderParametersLib\Models\Vehicle;
use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;

class APIController extends BaseController
{
    /**
     * Retrieves a checkout order, allowing response simulation via a complex header.
     *
     * @param PaypalMockResponseSchema|null $payPalMockResponse Simulates negative responses.
     *
     * @return SuccessResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function retrieveCheckoutOrder(?PaypalMockResponseSchema $payPalMockResponse = null): SuccessResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/header/v2/checkout/orders')
            ->parameters(HeaderParam::init('PayPal-Mock-Response', $payPalMockResponse));

        $_resHandler = $this->responseHandler()->type(SuccessResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Accepts a single vehicle object in the header.
     *
     * @param Vehicle $vehicleHeader JSON-serialized Vehicle object.
     *
     * @return SuccessResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function submitVehicleInformation(Vehicle $vehicleHeader): SuccessResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/header/vehicle')
            ->parameters(HeaderParam::init('vehicle-header', $vehicleHeader));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Invalid input.'))
            ->type(SuccessResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Accepts a Car or a Bike object in the header.
     *
     * @param Car|Bike $oneOfVehicle JSON-serialized Car or Bike object.
     *
     * @return SuccessResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function submitAOneOfVehicle($oneOfVehicle): SuccessResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/header/oneOfVehicles')
            ->parameters(HeaderParam::init('one-of-vehicle', $oneOfVehicle)->strictType('oneOf(Car,Bike)'));

        $_resHandler = $this->responseHandler()->type(SuccessResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Accepts a map of vehicle objects in the header.
     *
     * @param array<string,Vehicle> $mapOfVehicles JSON-serialized map of Vehicle objects.
     *
     * @return SuccessResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function submitAMapOfVehicles(array $mapOfVehicles): SuccessResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/header/vehiclesMap')
            ->parameters(HeaderParam::init('map-of-vehicles', $mapOfVehicles));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Invalid input'))
            ->type(SuccessResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Accepts an array of vehicles in the request body.
     *
     * @param Vehicle[] $body
     *
     * @return SuccessResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function submitAnArrayOfVehicles(array $body): SuccessResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/header/vehiclesArray')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Invalid input'))
            ->type(SuccessResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
